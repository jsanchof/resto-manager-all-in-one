# System Architecture

## Overview
The restaurant management system follows a modern client-server architecture with a clear separation of concerns. It utilizes a RESTful API design pattern and implements a secure authentication system.

## Technology Stack

### Backend
- **Framework**: Flask (Python)
- **Database**: PostgreSQL
- **ORM**: SQLAlchemy
- **Authentication**: JWT (JSON Web Tokens)
- **Admin Interface**: Flask-Admin
- **Migration Tool**: Alembic with Flask-Migrate

### Frontend
- **Framework**: React.js
- **State Management**: React Context/Redux
- **UI Components**: Custom themed components
- **Build Tool**: Vite
- **Styling**: CSS with modern features

### DevOps
- **Containerization**: Docker
- **Deployment Platform**: Render
- **Database Hosting**: Render PostgreSQL
- **Version Control**: Git
  - Branch Strategy:
    ```
    main     ← stable, production-ready code
     │
     └── develop   ← staging, integration of all tested features
          │
          └── feature/my-feature ← short-lived branches for isolated work
    ```
  - Branch Naming Conventions:
    - `feature/*` - New features
    - `bugfix/*` - Bug fixes
    - `improvement/*` - Improvements to existing features
    - `hotfix/*` - Urgent fixes for production
  - Pull Request Process Required
  - Code Review Required

### CI/CD
- **Platform**: GitHub Actions
- **Workflows**:
  - Continuous Integration:
    - Code linting
    - Unit tests
    - Integration tests
    - Build validation
  - Continuous Deployment:
    - Automatic deployment to staging (develop branch)
    - Manual approval for production deployment (main branch)
    - Database migration management
    - Environment configuration
  - **Improvement Plan:**
    - Consolidate all workflow files to remove redundancy (ci.yml, build.yml, render.yml)
    - Ensure consistent ordering of jobs (lint, test, build, migrate, deploy)
    - Move all hardcoded secrets (e.g., database credentials) to GitHub repository secrets
    - Reference secrets in workflow files using `${{ secrets.SECRET_NAME }}`
    - Automate Render deployment or document manual steps clearly

## Component Architecture

### Database Schema
```
Users
  └─ Orders
       └─ OrderDetails
            └─ Products
                 └─ Ingredients
Tables
  └─ Reservations
```

### Backend Components

#### Core Components
1. **Authentication System**
   - JWT token management
   - Role-based access control
   - Session management

2. **Order Management**
   - Order processing
   - Status tracking
   - Order history

3. **Table Management**
   - Reservation system
   - Table status tracking
   - Capacity management

4. **Product Management**
   - Menu management
   - Ingredient tracking
   - Category management

#### API Structure
```
/api
├── routes/
│   ├── auth.py         # Authentication endpoints
│   ├── orders.py       # Order management
│   ├── products.py     # Product/menu management
│   ├── tables.py       # Table management
│   ├── kitchen.py      # Kitchen-specific endpoints
│   └── waiter.py       # Waiter-specific endpoints
├── models/
│   └── database models and relationships
└── utils/
    └── helper functions and utilities
```

### Frontend Architecture

#### Component Structure
```
/front
├── components/         # Reusable UI components
├── pages/             # Page components
├── layouts/           # Layout templates
├── hooks/             # Custom React hooks
├── utils/             # Utility functions
└── theme/             # UI theming
```

#### State Management
- Context API for global state
- Local state for component-specific data
- API service layer for data fetching

## Security Architecture

### Authentication Flow
1. User login/registration
2. JWT token generation
3. Token validation on protected routes
4. Role-based access control

### Data Protection
- Password hashing with bcrypt
- HTTPS for all communications
- SQL injection protection via ORM
- CORS configuration

## Scalability Considerations

### Database
- Connection pooling
- Indexed queries
- Efficient relationships

### Application
- Modular design
- Stateless API
- Caching strategies

## Deployment Architecture

### Production Environment
```
Client Browser
     │
     ▼
   Render
     │
     ├────► React Frontend (Static)
     │
     ├────► Flask Backend
     │         │
     │         ▼
     └────► PostgreSQL Database
```

### Development Environment
- Local PostgreSQL instance
- Hot-reloading for frontend
- Debug mode for backend
- Migration management

## Monitoring and Logging

### Current Implementation
- Basic error logging
- Database query logging
- API request logging

### Future Improvements
- Application performance monitoring
- Error tracking service
- User activity monitoring
- Resource usage tracking

## Integration Points

### External Services
- Email service for notifications
- Future PayPal integration
- Future inventory management integration

### Internal Integration
- Kitchen display system
- Order management system
- Table management system

## Testing Architecture

### Backend Testing
- Unit tests for models
- Integration tests for APIs
- End-to-end testing

### Frontend Testing
- Component testing
- Integration testing
- User interface testing

## Documentation
- API documentation
- User guides
- Development guides
- Deployment procedures

## Database Design

### Product Management
- Polymorphic inheritance for Products
  - Base Product table with common fields
  - Specialized Dishes table for food items
  - Specialized Drinks table for beverages
  - Ingredient junction table for recipe management

### Inventory Management
- Real-time stock tracking
- Ingredient usage calculation
- Automatic reorder notifications
- Stock history tracking

### API Structure
- Products API
  - Common product operations
  - Specialized dish operations
  - Specialized drink operations
- Inventory API
  - Stock management
  - Ingredient tracking
  - Usage reports

## Technical Debt and Required Improvements (2024)

- **Polymorphic Product Model:** Not yet implemented; required for menu extensibility.
- **Inventory/Ingredient Management:** Endpoints and models are incomplete or missing.
- **Migration Scripts:** Absent; must be created for all schema changes.
- **Test Coverage:** Insufficient; expand automated tests for backend and frontend.
- **CI/CD Security:** Hardcoded secrets in workflows; migrate to GitHub secrets.
- **Documentation:** Update all docs to reflect new features and architecture changes.

- **Flask App Entry Point:** The entry point for the Flask app and migration context is `src/app.py`.
- **Windows Migration Script:** A Windows-compatible migration script should be created to match the Linux `database.sh` functionality.

- **Blueprint Refactor:** All route files now use their own Blueprint (e.g., orders_api, kitchen_api) instead of a shared 'api' object. This eliminates circular imports and enables migrations and app startup. Each Blueprint is registered in routes/__init__.py.

- **Endpoint Conflict Fix:** Resolved a Flask endpoint conflict in kitchen.py by using functools.wraps in the kitchen_required decorator, ensuring unique endpoint names for all routes.
- **Migration Success:** Migration scripts can now be generated and applied successfully after resolving all import and endpoint issues.

## [UPDATE] ProductIngredient Model Added
- ProductIngredient model now links products and ingredients (many-to-many).
- Migrations and tests are passing as of this update.

## [NEXT] Focus: Test coverage and documentation improvements.

## Environment and Deployment Updates (2024)
- The frontend and backend are now served from a single Render web service. The backend (Flask) serves the frontend static files (Vite build output in /public), and all API calls are routed through the correct VITE_BACKEND_URL.
- Environment management is robust and standardized:
  - `FLASK_ENV` controls environment-specific logic (development, production, test).
  - `FRONTEND_URL` is required for registration and email verification flows.
  - `VITE_BACKEND_URL` is used in the frontend for all API calls, ensuring flexibility across local dev, local prod, CI/CD, and Render.
- All API calls in the frontend should use `VITE_BACKEND_URL` for consistency and environment flexibility.
- There is no longer a separate static site deployment on Render; everything is handled by a single web service.

## Implementation Plan Status
- All previous implementation steps (migrations, CI/CD, environment management, endpoint corrections, etc.) are complete and marked as done.
- **Next step:** Review all frontend API calls to ensure they use the correct backend path (`VITE_BACKEND_URL`).
